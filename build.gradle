
allprojects {
    group = 'com.roacg'
    version = '0.0.1-SNAPSHOT'

    apply from: "${rootDir}/dependency.gradle"

    apply plugin: 'maven'

    ext.gradleScriptDir = "${rootProject.projectDir}/tasks"

    apply from: "${gradleScriptDir}/task.gradle"


}

//容器模块名字
def holderProjects = Arrays.asList('roacg-core', 'roacg-security', 'roacg-service')

configure(subprojects) { subp ->
    //此处主要为了过滤容器模块中的插件配置，容器模块的主要用来管理下属部分的模块，无需添加依赖和插件
    if (!holderProjects.contains(subp.name)) {

        repositories {
            maven { url = 'https://maven.aliyun.com/repository/jcenter' }
            maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
            maven { url = "https://plugins.gradle.org/m2/" }
            jcenter()
            mavenCentral()
        }

        apply plugin: 'java'

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

        apply from: "${rootDir}/dependency.gradle"



        dependencies {
//            implementation libs['commons-lang3']
            //lombok
            annotationProcessor libs['lombok']
            compileOnly libs['lombok']
            testAnnotationProcessor libs['lombok']
            testCompileOnly libs['lombok']

            testImplementation libs['junit']
        }

//
//        sourceSets{
//            dev.resource.srcDirs=['src/main/resource/dev']
//            pro.resource.srcDirs=['src/main/resource/pro']
//        }

        //指定编译的目录
        sourceSets {
            main {
                //https://www.jianshu.com/p/3d5ca604f0a0
                //保留环境包目录的方式
                /*resources {
                    sourceSets.main.resources.srcDirs.each {
                        it.listFiles().each {
                            if (it.isDirectory() && it.name != "${env}") {
                                println "Exclude environment [${it.name}]"
                                exclude "${it.name}"
                            }
                        }
                    }
                }*/

                //直接将环境包目录下的文件打包到resources根目录下
                resources {
                    srcDir "src/main/resources/${env}"
                    println "Current environment [${env}] by ${project.name}. "

                    sourceSets.main.resources.srcDirs.each   {
                        it.listFiles().each {
                            if(it.isDirectory()) {
                                exclude "${it.name}"
                            }
                        }
                    }
                }
            }
        }
    }
}

